// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "RPostgres_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// connect
XPtr<PqConnectionPtr> connect(std::vector<std::string> keys, std::vector<std::string> values);
RcppExport SEXP RPostgres_connect(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type values(valuesSEXP);
    __result = Rcpp::wrap(connect(keys, values));
    return __result;
END_RCPP
}
// con_info
List con_info(XPtr<PqConnectionPtr> con);
RcppExport SEXP RPostgres_con_info(SEXP conSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqConnectionPtr> >::type con(conSEXP);
    __result = Rcpp::wrap(con_info(con));
    return __result;
END_RCPP
}
// postgres_disconnect
void postgres_disconnect(XPtr<PqConnectionPtr> con);
RcppExport SEXP RPostgres_postgres_disconnect(SEXP conSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqConnectionPtr> >::type con(conSEXP);
    postgres_disconnect(con);
    return R_NilValue;
END_RCPP
}
// escape_string
CharacterVector escape_string(XPtr<PqConnectionPtr> con, CharacterVector xs);
RcppExport SEXP RPostgres_escape_string(SEXP conSEXP, SEXP xsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqConnectionPtr> >::type con(conSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type xs(xsSEXP);
    __result = Rcpp::wrap(escape_string(con, xs));
    return __result;
END_RCPP
}
// escape_identifier
CharacterVector escape_identifier(XPtr<PqConnectionPtr> con, CharacterVector xs);
RcppExport SEXP RPostgres_escape_identifier(SEXP conSEXP, SEXP xsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqConnectionPtr> >::type con(conSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type xs(xsSEXP);
    __result = Rcpp::wrap(escape_identifier(con, xs));
    return __result;
END_RCPP
}
// encode_vector
std::string encode_vector(RObject x);
RcppExport SEXP RPostgres_encode_vector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< RObject >::type x(xSEXP);
    __result = Rcpp::wrap(encode_vector(x));
    return __result;
END_RCPP
}
// encrypt_password
String encrypt_password(String password, String user);
RcppExport SEXP RPostgres_encrypt_password(SEXP passwordSEXP, SEXP userSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< String >::type password(passwordSEXP);
    Rcpp::traits::input_parameter< String >::type user(userSEXP);
    __result = Rcpp::wrap(encrypt_password(password, user));
    return __result;
END_RCPP
}
// rpostgres_send_query
XPtr<PqResult> rpostgres_send_query(XPtr<PqConnectionPtr> con, std::string sql);
RcppExport SEXP RPostgres_rpostgres_send_query(SEXP conSEXP, SEXP sqlSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqConnectionPtr> >::type con(conSEXP);
    Rcpp::traits::input_parameter< std::string >::type sql(sqlSEXP);
    __result = Rcpp::wrap(rpostgres_send_query(con, sql));
    return __result;
END_RCPP
}
// postgres_fetch
List postgres_fetch(XPtr<PqResult> rs, int n);
RcppExport SEXP RPostgres_postgres_fetch(SEXP rsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqResult> >::type rs(rsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(postgres_fetch(rs, n));
    return __result;
END_RCPP
}
// postgresql_bind_params
void postgresql_bind_params(XPtr<PqResult> rs, ListOf<CharacterVector> params);
RcppExport SEXP RPostgres_postgresql_bind_params(SEXP rsSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqResult> >::type rs(rsSEXP);
    Rcpp::traits::input_parameter< ListOf<CharacterVector> >::type params(paramsSEXP);
    postgresql_bind_params(rs, params);
    return R_NilValue;
END_RCPP
}
// postgresql_bind_rows
void postgresql_bind_rows(XPtr<PqResult> rs, ListOf<CharacterVector> params);
RcppExport SEXP RPostgres_postgresql_bind_rows(SEXP rsSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqResult> >::type rs(rsSEXP);
    Rcpp::traits::input_parameter< ListOf<CharacterVector> >::type params(paramsSEXP);
    postgresql_bind_rows(rs, params);
    return R_NilValue;
END_RCPP
}
// rows_affected
int rows_affected(XPtr<PqResult> rs);
RcppExport SEXP RPostgres_rows_affected(SEXP rsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqResult> >::type rs(rsSEXP);
    __result = Rcpp::wrap(rows_affected(rs));
    return __result;
END_RCPP
}
// is_complete
bool is_complete(XPtr<PqResult> rs);
RcppExport SEXP RPostgres_is_complete(SEXP rsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqResult> >::type rs(rsSEXP);
    __result = Rcpp::wrap(is_complete(rs));
    return __result;
END_RCPP
}
// clear_result
void clear_result(XPtr<PqResult> rs);
RcppExport SEXP RPostgres_clear_result(SEXP rsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqResult> >::type rs(rsSEXP);
    clear_result(rs);
    return R_NilValue;
END_RCPP
}
// postgres_result_valid
bool postgres_result_valid(XPtr<PqResult> rs);
RcppExport SEXP RPostgres_postgres_result_valid(SEXP rsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqResult> >::type rs(rsSEXP);
    __result = Rcpp::wrap(postgres_result_valid(rs));
    return __result;
END_RCPP
}
// postgres_row_count
int postgres_row_count(XPtr<PqResult> rs);
RcppExport SEXP RPostgres_postgres_row_count(SEXP rsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqResult> >::type rs(rsSEXP);
    __result = Rcpp::wrap(postgres_row_count(rs));
    return __result;
END_RCPP
}
// postgres_rows_affected
int postgres_rows_affected(XPtr<PqResult> rs);
RcppExport SEXP RPostgres_postgres_rows_affected(SEXP rsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqResult> >::type rs(rsSEXP);
    __result = Rcpp::wrap(postgres_rows_affected(rs));
    return __result;
END_RCPP
}
// postgres_column_info
List postgres_column_info(XPtr<PqResult> rs);
RcppExport SEXP RPostgres_postgres_column_info(SEXP rsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<PqResult> >::type rs(rsSEXP);
    __result = Rcpp::wrap(postgres_column_info(rs));
    return __result;
END_RCPP
}
