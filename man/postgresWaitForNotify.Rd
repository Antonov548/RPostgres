% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PqConnection.R
\name{postgresWaitForNotify}
\alias{postgresWaitForNotify}
\title{Wait for and return any notifications that return within timeout}
\usage{
postgresWaitForNotify(conn, timeout = 1)
}
\arguments{
\item{conn}{a \linkS4class{PqConnection} object, produced by
\code{\link[DBI:dbConnect]{DBI::dbConnect()}}}

\item{timeout}{How long to wait, in seconds. Default 1}
}
\value{
If a notification was available, a list of:
\describe{
\item{channel}{Name of channel}
\item{pid}{PID of notifying server process}
\item{payload}{Content of notification}
}
If no notifications are available, return NULL
}
\description{
Once you subscribe to notifications with LISTEN, use this to wait for
responses on each channel.
}
\examples{
# For running the examples on systems without PostgreSQL connection:
if (postgresHasDefault()) {
  library(DBI)
  # DB1 listens for messages on the grapevine
  db1 <- dbConnect(RPostgres::Postgres())
  dbExecute(db1, "LISTEN grapevine")

  # DB2 sends one (NB: Normally part of another process)
  db2 <- dbConnect(RPostgres::Postgres())
  dbExecute(db2, "NOTIFY grapevine, 'psst'")

  # DB1 waits for the message to come
  n <- RPostgres::postgresWaitForNotify(db1)
  if (!is.null(n)) writeLines(c("Got a message:-", n$payload))
}
}
